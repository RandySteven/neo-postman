// +build !testmock

// Code generated by mockery v2.43.1. DO NOT EDIT.

package mocks

import (
	context "context"

	apperror "github.com/RandySteven/neo-postman/apperror"

	mock "github.com/stretchr/testify/mock"

	requests "github.com/RandySteven/neo-postman/entities/payloads/requests"

	responses "github.com/RandySteven/neo-postman/entities/payloads/responses"
)

// TestDataUsecase is an autogenerated mock type for the TestDataUsecase type
type TestDataUsecase struct {
	mock.Mock
}

// AutoDeleteUnsavedRecord provides a mock function with given fields: ctx
func (_m *TestDataUsecase) AutoDeleteUnsavedRecord(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for AutoDeleteUnsavedRecord")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateAPITest provides a mock function with given fields: ctx, request
func (_m *TestDataUsecase) CreateAPITest(ctx context.Context, request *requests.TestDataRequest) (*responses.TestDataResponse, *apperror.CustomError) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateAPITest")
	}

	var r0 *responses.TestDataResponse
	var r1 *apperror.CustomError
	if rf, ok := ret.Get(0).(func(context.Context, *requests.TestDataRequest) (*responses.TestDataResponse, *apperror.CustomError)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *requests.TestDataRequest) *responses.TestDataResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*responses.TestDataResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *requests.TestDataRequest) *apperror.CustomError); ok {
		r1 = rf(ctx, request)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apperror.CustomError)
		}
	}

	return r0, r1
}

// GetAllRecords provides a mock function with given fields: ctx
func (_m *TestDataUsecase) GetAllRecords(ctx context.Context) ([]*responses.TestRecordList, *apperror.CustomError) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllRecords")
	}

	var r0 []*responses.TestRecordList
	var r1 *apperror.CustomError
	if rf, ok := ret.Get(0).(func(context.Context) ([]*responses.TestRecordList, *apperror.CustomError)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*responses.TestRecordList); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*responses.TestRecordList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) *apperror.CustomError); ok {
		r1 = rf(ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apperror.CustomError)
		}
	}

	return r0, r1
}

// GetRecord provides a mock function with given fields: ctx, id
func (_m *TestDataUsecase) GetRecord(ctx context.Context, id uint64) (*responses.TestDataDetail, *apperror.CustomError) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetRecord")
	}

	var r0 *responses.TestDataDetail
	var r1 *apperror.CustomError
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (*responses.TestDataDetail, *apperror.CustomError)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) *responses.TestDataDetail); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*responses.TestDataDetail)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) *apperror.CustomError); ok {
		r1 = rf(ctx, id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apperror.CustomError)
		}
	}

	return r0, r1
}

// SaveRecord provides a mock function with given fields: ctx, id
func (_m *TestDataUsecase) SaveRecord(ctx context.Context, id uint64) (string, *apperror.CustomError) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for SaveRecord")
	}

	var r0 string
	var r1 *apperror.CustomError
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (string, *apperror.CustomError)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) string); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) *apperror.CustomError); ok {
		r1 = rf(ctx, id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apperror.CustomError)
		}
	}

	return r0, r1
}

// UnsavedRecord provides a mock function with given fields: ctx, id
func (_m *TestDataUsecase) UnsavedRecord(ctx context.Context, id uint64) (string, *apperror.CustomError) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for UnsavedRecord")
	}

	var r0 string
	var r1 *apperror.CustomError
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (string, *apperror.CustomError)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) string); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) *apperror.CustomError); ok {
		r1 = rf(ctx, id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apperror.CustomError)
		}
	}

	return r0, r1
}

// NewTestDataUsecase creates a new instance of TestDataUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTestDataUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *TestDataUsecase {
	mock := &TestDataUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
