// +build !testmock

// Code generated by mockery v2.43.1. DO NOT EDIT.

package mocks

import (
	context "context"

	jira "github.com/andygrunwald/go-jira"
	mock "github.com/stretchr/testify/mock"
)

// JiraAction is an autogenerated mock type for the JiraAction type
type JiraAction struct {
	mock.Mock
}

// CreateIssue provides a mock function with given fields: ctx, request
func (_m *JiraAction) CreateIssue(ctx context.Context, request *jira.Issue) (*jira.Response, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateIssue")
	}

	var r0 *jira.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *jira.Issue) (*jira.Response, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *jira.Issue) *jira.Response); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jira.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *jira.Issue) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetClient provides a mock function with given fields:
func (_m *JiraAction) GetClient() *jira.Client {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetClient")
	}

	var r0 *jira.Client
	if rf, ok := ret.Get(0).(func() *jira.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jira.Client)
		}
	}

	return r0
}

// NewJiraAction creates a new instance of JiraAction. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewJiraAction(t interface {
	mock.TestingT
	Cleanup(func())
}) *JiraAction {
	mock := &JiraAction{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
