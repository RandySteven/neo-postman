// +build !testmock

// Code generated by mockery v2.43.1. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/RandySteven/neo-postman/entities/models"
	mock "github.com/stretchr/testify/mock"
)

// TestRecordRepository is an autogenerated mock type for the TestRecordRepository type
type TestRecordRepository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, id
func (_m *TestRecordRepository) Delete(ctx context.Context, id uint64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields: ctx
func (_m *TestRecordRepository) FindAll(ctx context.Context) ([]*models.TestRecord, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 []*models.TestRecord
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*models.TestRecord, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*models.TestRecord); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.TestRecord)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: ctx, id
func (_m *TestRecordRepository) FindByID(ctx context.Context, id uint64) (*models.TestRecord, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 *models.TestRecord
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (*models.TestRecord, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) *models.TestRecord); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TestRecord)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, request
func (_m *TestRecordRepository) Save(ctx context.Context, request *models.TestRecord) (*models.TestRecord, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 *models.TestRecord
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.TestRecord) (*models.TestRecord, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.TestRecord) *models.TestRecord); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TestRecord)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.TestRecord) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveSavedTestData provides a mock function with given fields: ctx
func (_m *TestRecordRepository) SaveSavedTestData(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for SaveSavedTestData")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, request
func (_m *TestRecordRepository) Update(ctx context.Context, request *models.TestRecord) (*models.TestRecord, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *models.TestRecord
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.TestRecord) (*models.TestRecord, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.TestRecord) *models.TestRecord); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TestRecord)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.TestRecord) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTestRecordRepository creates a new instance of TestRecordRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTestRecordRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *TestRecordRepository {
	mock := &TestRecordRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
