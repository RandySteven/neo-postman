// +build !testmock

// Code generated by mockery v2.43.1. DO NOT EDIT.

package mocks

import (
	context "context"

	apperror "github.com/RandySteven/neo-postman/apperror"

	mock "github.com/stretchr/testify/mock"

	requests "github.com/RandySteven/neo-postman/entities/payloads/requests"

	responses "github.com/RandySteven/neo-postman/entities/payloads/responses"
)

// TestRecordUseCase is an autogenerated mock type for the TestRecordUseCase type
type TestRecordUseCase struct {
	mock.Mock
}

// AutoSaveTestRecord provides a mock function with given fields: ctx
func (_m *TestRecordUseCase) AutoSaveTestRecord(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for AutoSaveTestRecord")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateTestRecord provides a mock function with given fields: ctx, request
func (_m *TestRecordUseCase) CreateTestRecord(ctx context.Context, request *requests.TestRecordRequest) (*responses.TestRecordCreateResponse, *apperror.CustomError) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateTestRecord")
	}

	var r0 *responses.TestRecordCreateResponse
	var r1 *apperror.CustomError
	if rf, ok := ret.Get(0).(func(context.Context, *requests.TestRecordRequest) (*responses.TestRecordCreateResponse, *apperror.CustomError)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *requests.TestRecordRequest) *responses.TestRecordCreateResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*responses.TestRecordCreateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *requests.TestRecordRequest) *apperror.CustomError); ok {
		r1 = rf(ctx, request)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apperror.CustomError)
		}
	}

	return r0, r1
}

// GetAllTestRecords provides a mock function with given fields: ctx
func (_m *TestRecordUseCase) GetAllTestRecords(ctx context.Context) ([]*responses.TestRecordListResponse, *apperror.CustomError) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllTestRecords")
	}

	var r0 []*responses.TestRecordListResponse
	var r1 *apperror.CustomError
	if rf, ok := ret.Get(0).(func(context.Context) ([]*responses.TestRecordListResponse, *apperror.CustomError)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*responses.TestRecordListResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*responses.TestRecordListResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) *apperror.CustomError); ok {
		r1 = rf(ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apperror.CustomError)
		}
	}

	return r0, r1
}

// GetTestRecordDetail provides a mock function with given fields: ctx, id
func (_m *TestRecordUseCase) GetTestRecordDetail(ctx context.Context, id uint64) (*responses.TestRecordDetailResponse, *apperror.CustomError) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetTestRecordDetail")
	}

	var r0 *responses.TestRecordDetailResponse
	var r1 *apperror.CustomError
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (*responses.TestRecordDetailResponse, *apperror.CustomError)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) *responses.TestRecordDetailResponse); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*responses.TestRecordDetailResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) *apperror.CustomError); ok {
		r1 = rf(ctx, id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apperror.CustomError)
		}
	}

	return r0, r1
}

// NewTestRecordUseCase creates a new instance of TestRecordUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTestRecordUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *TestRecordUseCase {
	mock := &TestRecordUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
